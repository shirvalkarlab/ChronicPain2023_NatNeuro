% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Omid Sani, Maryam Shanechi
%   Shanechi Lab, University of Southern California, 2016
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%designFilterHPIIREButter Returns a high-pass IIR filter (num and denum 
%coefficients) designed by the butterworth method, with given order
%   Inputs:
%     - (1) Fs: signal sampling rate
%     - (2) Fc: pass band frequency
%     - (3) N (optional, default: 4): Filter order (# of poles will be
%           N+1). If large, likely to be unstable
%   Outputs:
%     - (1) b: numerator coefficients
%     - (2) a (optional): denumerator coefficiednts. Is 1 for FIR filters
%     - (4) Hd (optional): Filter object
%   Usage example:
%       [b, a] = designFilterHPIIRButter(128, 16, 15);

function [b, varargout] = designFilterHPIIRButter(Fs, Fc, N)
%DESIGNFILTERHPIIREBUTTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.1 and the Signal Processing Toolbox 7.3.
% Generated on: 26-Jan-2017 16:10:32

% Butterworth Highpass filter designed using FDESIGN.HIGHPASS.

% All frequency values are in Hz.
% Fs = 1;  % Sampling Frequency

% Fc = 0.001;  % Cutoff Frequency
if Fc > (Fs/2), error('Fc must be smaller than 0.5*Fs'); end

% N  = 4;      % Order
if nargin < 3 || isempty(N), N = 4; end % Order

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.highpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');

[b,a] = sos2tf(Hd.sosMatrix, Hd.ScaleValues);

if nargout > 1
    varargout{1} = a;
end

if nargout > 2
    varargout{2} = Hd;
end
