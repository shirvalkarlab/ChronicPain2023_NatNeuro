% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Omid Sani, Maryam Shanechi
%   Shanechi Lab, University of Southern California, 2017
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%designFilterBSIIRButter Returns a band-stop IIR filter (num and denum 
%coefficients) designed by the butterworth method, with given order
%   Inputs:
%     - (1) Fs: signal sampling rate
%     - (2) FCutOff: cutoff frequencies (should be [Fc1,Fc2])
%     - (3) N (optional, default: 4): Filter order (# of poles will be
%           N+1). If large, likely to be unstable
%   Outputs:
%     - (1) b: numerator coefficients
%     - (2) a (optional): denumerator coefficiednts. Is 1 for FIR filters
%     - (3) Hd (optional): Filter object
%   Usage example:
%       [b, a] = designFilterBSIIRButter(128, [16 32], 15);

function [b, varargout] = designFilterBSIIRButter(Fs, FCutOff, N)
%DESIGNFILTERBSIIRBUTTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 11-Aug-2017 16:59:37

% Butterworth Bandstop filter designed using FDESIGN.BANDSTOP.

% All frequency values are in Hz.
% Fs = 512;  % Sampling Frequency

% Fc1 = 59;  % First Cutoff Frequency
% Fc2 = 61;  % Second Cutoff Frequency
if FCutOff(2) <= FCutOff(1), error('FCutOff must be [low,high]'); end
Fc1 = FCutOff(1);    % First Cutoff Frequency
Fc2 = FCutOff(2);    % Second Cutoff Frequency

if Fc2 > (Fs/2), error('FCutOff(2) must be smaller than 0.5*Fs'); end

% N   = 4;   % Order
if nargin < 3 || isempty(N), N = 4; end % Order

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.bandstop('N,F3dB1,F3dB2', N, Fc1, Fc2, Fs);
Hd = design(h, 'butter');

[b,a] = sos2tf(Hd.sosMatrix, Hd.ScaleValues);

if nargout > 1
    varargout{1} = a;
end

if nargout > 2
    varargout{2} = Hd;
end